services:
  db:
    image: postgres:17-alpine
    environment: # Retrieved from Github Secrets/Variables
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  api:
    build: 
      context: ./backend
      target: production
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment: # Retrieved from Github Secrets/Variables
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DEBUG: ${DEBUG}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
  web:
    build: 
      context: ./frontend
      target: production
    ports:
      - "80:80"
    volumes:
      - /frontend/node_modules
    environment:
      NODE_ENV: production
      VITE_API_BASE_URL: ${VITE_API_BASE_URL}
      VITE_GOOGLE_OAUTH_CLIENT_ID: ${VITE_GOOGLE_OAUTH_CLIENT_ID}
volumes:
   postgres_data:
