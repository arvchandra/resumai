# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

defaults:
  run:
    working-directory: ./backend

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env: # Retrieved from Github Secrets/Variables
          POSTGRES_DB: ${GIT_POSTGRES_DB}
          POSTGRES_USER: ${GIT_POSTGRES_USER}
          POSTGRES_PASSWORD: ${GIT_POSTGRES_PASSWORD}
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    - name: Run migrations
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      run: python manage.py migrate
    - name: Lint with ruff
      run: ruff check --output-format=github --target-version=py310
    - name: Check code formatting with Ruff
      run: ruff format --diff --target-version=py310
      continue-on-error: true
    - name: Test with pytest
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      run: |
        coverage run -m pytest  -v -s
    - name: Generate Coverage Report
      run: |
        coverage report -m
